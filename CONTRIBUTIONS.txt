CONTRIBUTIONS


< Coen / 175448P >
CLASSES : {
	Projectile;
	ParticleManager;
	CameraEffectManager;
	TimeTrackerManager;
	Particle_2;
	CameraEffect;
	RigInfo;
	JointInfo;
	Witch;
	FlyingWitch;
	Boss;
	NPC;
	
	UNUSED : JoystickController;
}
OBJ/TGA ASSETS : {
	ball.obj;
	action_lines.tga;
	time_slow_texture.tga;
	time_slow_hand_texture.tga;
	fireball_texture.tga;
	iceball_texture.tga;
	shield_texture.tga;
}
FRAMEWORK CONTRIBUTIONS : {
	SHADER : Texture Offset (moving textures), Object Transparency;
	CAMERA EFFECTS : easily add camera effects, automatically updates and renders due to CameraEffectManager;
	PARTICLE EFFECTS : easily add particles, automatically updates and renders to due to ParticleManager;
	INTERPOLATIONS : added lerp (linear interpolation) functions in Math and Vector3;
	ANIMATIONS : add a rig to enemies if needed;
}
GAMEPLAY CONTRIBUTIONS : {
	Player Arm Animations : Player arms sway with camera, and moves/rotates with appropriate actions;
	Spells : Fire and Ice ball with LMB and RMB respectively, time-slow with the T button;
	Element parry : Spells from other enemies and player can clash with other projectiles and targets of the opposing element;
	Boss : Animated Tentacle Boss, chases player, throws fire/ice balls at player and also summons enemies, has a shield that will only temporarily be disabled upon successful element parry while casting;
	Enemies : Witches (grounded or flying) with "long-range AI", will throw fire/ice balls if player is not too and not too close;
	NPC : Displays dialogue if player is close enough and presses the middle mouse button;
}

< Rafiq / 170264F >
CLASSES : {
	Enemy,
	Entity,
	EntityManager,	
	Controller,
	Keyboard,
	Mouse,
	PlayerInfo,
}
OBJ/TGA ASSETS : {
	barrel.tga,
	floor.tga,
	rocks.tga,
	heightmapRange.raw,
	heightmapRangeMoving.raw,
	heightmapRangeElemental.raw,
	barrel.obj,
	pillar.obj,
	rocks.obj,
}
FRAMEWORK CONTRIBUTIONS : {
	ENTITY/ENTITY MANAGER: Base entity format for every object in-game to use. Manages all entities and ensures clean and efficient interaction.
	HARDWARE ABSTRACTION: Singletons control all KB/M inputs so that each scene can use the singular instance
	PLAYER INSTANCE: Allows player info to be accessed between all classes in order to carry over info between scenes and not require multiple player objects
	COLLISION: AABB and Sphere checking every frame between all entities to ensure players and entities do not occupy the same space
	GRAPHICAL FEATURES: Fog, shadows, etc
}
GAMEPLAY CONTRIBUTIONS : {
	Player Movement: Camera follows player in scenes so the game takes place in a first person perspective
	Targets: Targets that can be destroyed by player spells, that can have different type (fire/ice), and will move in the set range
	Target Scripting: Scripted sequence of targets in range apearing after being destroyed
}

< Jovan Low / 170373M >
CLASSES : {
	WitchFog
	SceneLevel1Basics
	SceneLevel2Burst
	SceneLevel3Fog
	SceneLevel4Flight
}
MAJOR FILE EDITS THAT WERE NOT A NEW CLASS : {
LoadTGA.cpp - Added PaintTGA function for painting textures, Added NewTGA function for generating blank textures
Level3.fragmentshader / Level3.vertexshader - Shader specifically for Level 3. Main difference is that the vertex shader will obtain specific fragment height relative to world position, and that fragment shader creates special fog
}
OBJ/TGA ASSETS : {
bolt.obj
bolt.tga
blank256.tga
dragon.obj (from Google Poly)
Tex_Dragon.tga (from Google Poly)
nest.obj (from Google Poly)
nest.tga (from Google Poly)
rightArm.obj
rightArm.tga
octoBody.obj
octoBody.tga
octoHead.obj
octoHead.tga
sign.obj
sign.tga
tornado.obj
tornado.tga
witch.obj
witch.tga
spellmodNormal.tga
spellmodBurst.tga
spellmodSpecial.tga
star.tga
hourglass.tga
hourglassFluid.tga
floor2.tga
floor3.tga
heightmapLevel1.raw
heightmapLevel2.raw
heightmapLevel3.raw
heightmapLevel4.raw
}
FRAMEWORK CONTRIBUTIONS : {
	SHADER AND LOADTGA (TEXTURE-PAINTING, GRAPHICAL) : Added a system that allows terrain to be mixed with a paint texture, where the texture will be edited to have the paint at specific coordinates when fire/ice projectiles hit the terrain. Check TDD for full explanation of implementation
	CAMERA : Camera sway and Camera shake in CPlayerInfo
	Line X AABB box Collision Algorithm : Collision that checks for a straight vector line intersecting with the AABB bounding box of another entity in the form of a cuboid
	TexCoord Remover : Able to cutoff parts of a mesh texture that you do not want to see. Used for the hourglass timer in some levels.
}
GAMEPLAY CONTRIBUTIONS : {
	SPECIAL FOG SHADER (PART OF THE GAME) : Level 3 uses a different shader (Level3 shader instead of Shadow shader) which has fog that can be affected by player position, and position of other objects that can clear up the fog. This is part of the gameplay as you are supposed to use your fire magic to light up the path and reach the goal.
	BURST PATTERNS FOR PROJECTILES : You can modify your spell to shoot your projectiles differently. You can launch 3 fireballs at once that will move while in a swirling pattern like a ring of fire. You can launch 3 iceballs that will spiral continuously around their direction of movement.
	DRAGON FLIGHT : Using Euler rotation, you can enter dragon flight mode and fly high in the sky, where Yaw/Pitch/Roll is available. There is also acceleration for your rotational movements.
	LIGHTNING BEAM SPELL (Ice Special) : Using Line X AABB box collision, the game can check whether your line of sight (with a distance limit) intersects an AABB box, before launching a lightning beam that lasts for less than a second.
	HURRICANE SPELL (Fire Special) : Launch a fire projectile that releases a hurricane upon colliding with the ground. The hurricane destroys all enemies and targets in its way, except the boss.
	LEVEL DESIGN : Created Levels 1 to 4 using entities that other members provided, such as targets and enemies.
}

< Hong Wei / 175063X >
CLASSES : {
	SceneManager
	SoundEngine
	SceneStartMenu
	SceneInstructions
	SceneInstructions1
	SceneInGameMenu
	SceneGameMenu
	SceneGameOver
	SceneControls
	SceneControls1
}
OBJ/TGA/SOUND ASSETS : {
controls.tga
gamemenu.tga
gameover.tga
menu.tga
instructionsss.tga
ingame.tga
}
FRAMEWORK CONTRIBUTIONS : {

}
GAMEPLAY CONTRIBUTIONS : {

}
